/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.ControladorColaVuelo;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import controlador.ControladorPilaAvion;
import controlador.ListaCircularClientes;
import javax.swing.JOptionPane;
import modelador.Avion;
import modelador.Cliente;
import modelador.Vuelo;
import AppPackage.AnimationClass;

/**
 *
 * @author 306
 */
public class Principal extends javax.swing.JFrame {

    //relaciones
    /**
     *
     */
    public Avion avion;
    public Vuelo vuelo;
    public Cliente cliente;

    public ControladorPilaAvion controladorPilaAvion;
    public ListaCircularClientes listaCircularCliente;
    public ControladorColaVuelo controladorColaVuelo;

    public InicioJPanel inicioJPanel;
    public PresidenteJPanel presidenteJPanel;
    public DirectorJPanel directorJPanel;

    //Aeronaves presidente
    public GestionAeronavesPresidenteJPanel gestionAeronavesPresidenteJPanel;
    public AgregarAeronavePresidenteJPanel agregarAeronavePresidenteJPanel;
    public EliminarAeronavePresidenteJPanel eliminarAeronavePresidenteJPanel;
    public BuscarAeronavePresidenteJPanel buscarAeronavePresidenteJPanel;
    public ModificarAeronavePresidenteJPanel modificarAeronavePresidenteJPanel;

    //Clientes presidente
    public GestionClientePresidenteJPanel gestionClientePresidenteJPanel;
    public ModificarClientePresidenteJPanel modificarClientePresidenteJPanel;
    public EliminarClientePresidenteJPanel eliminarClientePresidenteJPanel;
    public AgregarClientePresidenteJPanel agregarClientePresidenteJPanel;
    public BuscarClientePresidenteJPanel buscarClientePresidenteJPanel;

    //Trabajadores Presidente
    public GestionTrabajadorPresidenteJPanel gestionTrabajadorPresidenteJPanel;
    public ModificarTrabajadorPresidenteJPanel modificarTrabajadorPresidenteJPanel;
    public EliminarTrabajadorPresidenteJPanel eliminarTrabajadorPresidenteJPanel;
    public AgregarTrabajadorPresidenteJPanel agregarTrabajadorPresidenteJPanel;
    public BuscarTrabajadorPresidenteJPanel buscarTrabajadorPresidenteJPanel;
    
    //Vuelos presidente
    public GestionVuelosPresidenteJPanel gestionVuelosPresidenteJPanel;
    public ModificarVueloPresidenteJPanel modificarVueloPresidenteJPanel;
    public AgregarVueloPresidenteJPanel agregarVueloPresidenteJPanel;
    public CancelarVueloPresidenteJPanel cancelarVueloPresidenteJPanel;
    public BuscarVueloPresidenteJPanel buscarVueloPresidenteJPanel;

    //Aeronaves director
    public GestionAeronavesDirectorJPanel gestionAeronavesDirectorJPanel;
    public BuscarAeronaveDirectorJPanel buscarAeronaveDirectorJPanel;
    public ModificarAeronaveDirectorJPanel modificarAeronaveDirectorJPanel;

    //Clientes director
    public GestionClienteDirectorJPanel gestionClienteDirectorJPanel;
    public ModificarClienteDirectorJPanel modificarClienteDirectorJPanel;
    public EliminarClienteDirectorJPanel eliminarClienteDirectorJPanel;
    public AgregarClienteDirectorJPanel agregarClienteDirectorJPanel;
    public BuscarClienteDirectorJPanel buscarClienteDirectorJPanel;

    //Vuelos director
    public GestionVuelosDirectorJPanel gestionVuelosDirectorJPanel;
    public ModificarVueloDirectorJPanel modificarVueloDirectorJPanel;
    public AgregarVueloDirectorJPanel agregarVueloDirectorJPanel;
    public CancelarVueloDirectorJPanel cancelarVueloDirectorJPanel;
    public BuscarVueloDirectorJPanel buscarVueloDirectorJPanel;

    /**
     * Creates new form Principal
     */
    public Principal() {
        controladorPilaAvion = new ControladorPilaAvion();
        listaCircularCliente = new ListaCircularClientes();
        controladorColaVuelo = new ControladorColaVuelo();
        avion = new Avion();
        cliente = new Cliente();
        vuelo = new Vuelo();
        // avion = new Avion();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle("AereoUSB");
        setIconImage(new ImageIcon(getClass().getResource("/iconos/isotipoUSB.png")).getImage());
        setName("pricipalJFrame");
        setUndecorated(true);
        setResizable(false);
        pack();
        setLocationRelativeTo(null);
        iniciar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 93, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 62, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    public ControladorPilaAvion getControladorPilaAvion() {
        return controladorPilaAvion;
    }

    public ListaCircularClientes getListaCircularCliente() {
        return listaCircularCliente;
    }

    //Navegacion desde inicio
    public void iniciar() {
        inicioJPanel = new InicioJPanel(this);
        inicioJPanel.setVisible(true);
        add(inicioJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    //Navegacion entre paneles
    protected void irAPresidente(JPanel jPanel) {
        remove(jPanel);
        presidenteJPanel = new PresidenteJPanel(this);
        presidenteJPanel.setVisible(true);
        add(presidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irADirector(JPanel jPanel) {
        remove(jPanel);
        directorJPanel = new DirectorJPanel(this);
        directorJPanel.setVisible(true);
        add(directorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAGestionAeronavesPresidente(JPanel jPanel) {
        remove(jPanel);
        gestionAeronavesPresidenteJPanel = new GestionAeronavesPresidenteJPanel(this);
        gestionAeronavesPresidenteJPanel.setVisible(true);
        add(gestionAeronavesPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAGestionAeronavesDirector(JPanel jPanel) {
        remove(jPanel);
        gestionAeronavesDirectorJPanel = new GestionAeronavesDirectorJPanel(this);
        gestionAeronavesDirectorJPanel.setVisible(true);
        add(gestionAeronavesDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAGestionClientesPresidente(JPanel jPanel) {
        remove(jPanel);
        gestionClientePresidenteJPanel = new GestionClientePresidenteJPanel(this);
        gestionClientePresidenteJPanel.setVisible(true);
        add(gestionClientePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    
    protected void irAGestionTrabajadoresPresidente(JPanel jPanel) {
        remove(jPanel);
        gestionTrabajadorPresidenteJPanel = new GestionTrabajadorPresidenteJPanel(this);
        gestionTrabajadorPresidenteJPanel.setVisible(true);
        add(gestionTrabajadorPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAGestionClientesDirector(JPanel jPanel) {
        remove(jPanel);
        gestionClienteDirectorJPanel = new GestionClienteDirectorJPanel(this);
        gestionClienteDirectorJPanel.setVisible(true);
        add(gestionClienteDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAGestionVuelosPresidente(JPanel jPanel) {
        remove(jPanel);
        gestionVuelosPresidenteJPanel = new GestionVuelosPresidenteJPanel(this);
        gestionVuelosPresidenteJPanel.setVisible(true);
        add(gestionVuelosPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAGestionVuelosDirector(JPanel jPanel) {
        remove(jPanel);
        gestionVuelosDirectorJPanel = new GestionVuelosDirectorJPanel(this);
        gestionVuelosDirectorJPanel.setVisible(true);
        add(gestionVuelosDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAAgregarAeronavePresidente(JPanel jPanel) {
        remove(jPanel);
        agregarAeronavePresidenteJPanel = new AgregarAeronavePresidenteJPanel(this);
        agregarAeronavePresidenteJPanel.setVisible(true);
        add(agregarAeronavePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAAgregarClientePresidente(JPanel jPanel) {
        remove(jPanel);
        agregarClientePresidenteJPanel = new AgregarClientePresidenteJPanel(this);
        agregarClientePresidenteJPanel.setVisible(true);
        add(agregarClientePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAAgregarClienteDirector(JPanel jPanel) {
        remove(jPanel);
        agregarClienteDirectorJPanel = new AgregarClienteDirectorJPanel(this);
        agregarClienteDirectorJPanel.setVisible(true);
        add(agregarClienteDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    
    protected void irAAgregarTrabajadorDirector(JPanel jPanel) {
        remove(jPanel);
        agregarTrabajadorPresidenteJPanel = new AgregarTrabajadorPresidenteJPanel(this);
        agregarTrabajadorPresidenteJPanel.setVisible(true);
        add(agregarTrabajadorPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAAgregarVueloPresidente(JPanel jPanel) {
        remove(jPanel);
        agregarVueloPresidenteJPanel = new AgregarVueloPresidenteJPanel(this);
        agregarVueloPresidenteJPanel.setVisible(true);
        add(agregarVueloPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAAgregarVueloDirector(JPanel jPanel) {
        remove(jPanel);
        agregarVueloDirectorJPanel = new AgregarVueloDirectorJPanel(this);
        agregarVueloDirectorJPanel.setVisible(true);
        add(agregarVueloDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irACancelarVueloPresidente(JPanel JPanel) {
        remove(JPanel);
        cancelarVueloPresidenteJPanel = new CancelarVueloPresidenteJPanel(this);
        cancelarVueloPresidenteJPanel.setVisible(true);
        add(cancelarVueloPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irACancelarVueloDirector(JPanel JPanel) {
        remove(JPanel);
        cancelarVueloDirectorJPanel = new CancelarVueloDirectorJPanel(this);
        cancelarVueloDirectorJPanel.setVisible(true);
        add(cancelarVueloDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAEliminarAeronavePresidente(JPanel JPanel) {
        remove(JPanel);
        eliminarAeronavePresidenteJPanel = new EliminarAeronavePresidenteJPanel(this);
        eliminarAeronavePresidenteJPanel.setVisible(true);
        add(eliminarAeronavePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    
    protected void irAEliminarTrabajadorPresidente(JPanel JPanel) {
        remove(JPanel);
        eliminarTrabajadorPresidenteJPanel = new EliminarTrabajadorPresidenteJPanel(this);
        eliminarTrabajadorPresidenteJPanel.setVisible(true);
        add(eliminarTrabajadorPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAEliminarClientePresidente(JPanel JPanel) {
        remove(JPanel);
        eliminarClientePresidenteJPanel = new EliminarClientePresidenteJPanel(this);
        eliminarClientePresidenteJPanel.setVisible(true);
        add(eliminarClientePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAEliminarClienteDirector(JPanel JPanel) {
        remove(JPanel);
        eliminarClienteDirectorJPanel = new EliminarClienteDirectorJPanel(this);
        eliminarClienteDirectorJPanel.setVisible(true);
        add(eliminarClienteDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAModificarVueloPresidente(JPanel JPanel) {
        remove(JPanel);
        modificarVueloPresidenteJPanel = new ModificarVueloPresidenteJPanel(this);
        modificarVueloPresidenteJPanel.setVisible(true);
        add(modificarVueloPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    
    protected void irAModificarTrabajadorPresidente(JPanel JPanel) {
        remove(JPanel);
        modificarTrabajadorPresidenteJPanel = new ModificarTrabajadorPresidenteJPanel(this);
        modificarTrabajadorPresidenteJPanel.setVisible(true);
        add(modificarTrabajadorPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAModificarVueloDirector(JPanel JPanel) {
        remove(JPanel);
        modificarVueloDirectorJPanel = new ModificarVueloDirectorJPanel(this);
        modificarVueloDirectorJPanel.setVisible(true);
        add(modificarVueloDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAModificarAeronavePresidente(JPanel JPanel) {
        remove(JPanel);
        modificarAeronavePresidenteJPanel = new ModificarAeronavePresidenteJPanel(this);
        modificarAeronavePresidenteJPanel.setVisible(true);
        add(modificarAeronavePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAModificarAeronaveDirector(JPanel JPanel) {
        remove(JPanel);
        modificarAeronaveDirectorJPanel = new ModificarAeronaveDirectorJPanel(this);
        modificarAeronaveDirectorJPanel.setVisible(true);
        add(modificarAeronaveDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAModificarClientePresidente(JPanel JPanel) {
        remove(JPanel);
        modificarClientePresidenteJPanel = new ModificarClientePresidenteJPanel(this);
        modificarClientePresidenteJPanel.setVisible(true);
        add(modificarClientePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irAModificarClienteDirector(JPanel JPanel) {
        remove(JPanel);
        modificarClienteDirectorJPanel = new ModificarClienteDirectorJPanel(this);
        modificarClienteDirectorJPanel.setVisible(true);
        add(modificarClienteDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irABuscarAeronavePresidente(JPanel jPanel) {
        remove(jPanel);
        buscarAeronavePresidenteJPanel = new BuscarAeronavePresidenteJPanel(this);
        buscarAeronavePresidenteJPanel.setVisible(true);
        add(buscarAeronavePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irABuscarAeronaveDirector(JPanel jPanel) {
        remove(jPanel);
        buscarAeronaveDirectorJPanel = new BuscarAeronaveDirectorJPanel(this);
        buscarAeronaveDirectorJPanel.setVisible(true);
        add(buscarAeronaveDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irABuscarClientePresidente(JPanel jPanel) {
        remove(jPanel);
        buscarClientePresidenteJPanel = new BuscarClientePresidenteJPanel(this);
        buscarClientePresidenteJPanel.setVisible(true);
        add(buscarClientePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    
    protected void irABuscarTrabajadorPresidente(JPanel jPanel) {
        remove(jPanel);
        buscarTrabajadorPresidenteJPanel = new BuscarTrabajadorPresidenteJPanel(this);
        buscarTrabajadorPresidenteJPanel.setVisible(true);
        add(buscarTrabajadorPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irABuscarClienteDirector(JPanel jPanel) {
        remove(jPanel);
        buscarClienteDirectorJPanel = new BuscarClienteDirectorJPanel(this);
        buscarClienteDirectorJPanel.setVisible(true);
        add(buscarClienteDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irABuscarVueloPresidente(JPanel jPanel) {
        remove(jPanel);
        buscarVueloPresidenteJPanel = new BuscarVueloPresidenteJPanel(this);
        buscarVueloPresidenteJPanel.setVisible(true);
        add(buscarVueloPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void irABuscarVueloDirector(JPanel jPanel) {
        remove(jPanel);
        buscarVueloDirectorJPanel = new BuscarVueloDirectorJPanel(this);
        buscarVueloDirectorJPanel.setVisible(true);
        add(buscarVueloDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAGestionAeronavePresidente(JPanel jPanel) {
        remove(jPanel);
        gestionAeronavesPresidenteJPanel = new GestionAeronavesPresidenteJPanel(this);
        gestionAeronavesPresidenteJPanel.setVisible(true);
        add(gestionAeronavesPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    
    protected void volverAGestionTrabajadorPresidente(JPanel jPanel) {
        remove(jPanel);
        gestionTrabajadorPresidenteJPanel = new GestionTrabajadorPresidenteJPanel(this);
        gestionTrabajadorPresidenteJPanel.setVisible(true);
        add(gestionTrabajadorPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAGestionAeronaveDirector(JPanel jPanel) {
        remove(jPanel);
        gestionAeronavesDirectorJPanel = new GestionAeronavesDirectorJPanel(this);
        gestionAeronavesDirectorJPanel.setVisible(true);
        add(gestionAeronavesDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAGestionVuelosPresidente(JPanel jPanel) {
        remove(jPanel);
        gestionVuelosPresidenteJPanel = new GestionVuelosPresidenteJPanel(this);
        gestionVuelosPresidenteJPanel.setVisible(true);
        add(gestionVuelosPresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAGestionVuelosDirector(JPanel jPanel) {
        remove(jPanel);
        gestionVuelosDirectorJPanel = new GestionVuelosDirectorJPanel(this);
        gestionVuelosDirectorJPanel.setVisible(true);
        add(gestionVuelosDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAGestionClientePresidente(JPanel jPanel) {
        remove(jPanel);
        gestionClientePresidenteJPanel = new GestionClientePresidenteJPanel(this);
        gestionClientePresidenteJPanel.setVisible(true);
        add(gestionClientePresidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAGestionClienteDirector(JPanel jPanel) {
        remove(jPanel);
        gestionClienteDirectorJPanel = new GestionClienteDirectorJPanel(this);
        gestionClienteDirectorJPanel.setVisible(true);
        add(gestionClienteDirectorJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAInicio(JPanel jPanel) {
        remove(jPanel);
        inicioJPanel = new InicioJPanel(this);
        inicioJPanel.setVisible(true);
        add(inicioJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverAPresidente(JPanel jPanel) {
        remove(jPanel);
        presidenteJPanel = new PresidenteJPanel(this);
        presidenteJPanel.setVisible(true);
        add(presidenteJPanel);
        pack();
        setLocationRelativeTo(null);
    }

    protected void volverADirector(JPanel jPanel) {
        remove(jPanel);
        directorJPanel = new DirectorJPanel(this);
        directorJPanel.setVisible(true);
        add(directorJPanel);
        pack();
        setLocationRelativeTo(null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
